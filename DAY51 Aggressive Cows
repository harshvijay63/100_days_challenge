Aggressive Cows
You are given an array consisting of n integers which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows. You are given the task of assigning stalls to k cows such that the minimum distance between any two of them is the maximum possible.
The first line of input contains two space-separated integers n and k.
The second line contains n space-separated integers denoting the position of the stalls.

Example 1:

Input:
n=5 
k=3
stalls = [1 2 4 8 9]
Output:
3
Explanation:
The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows, in this case, is 3, 
which also is the largest among all possible ways.
Example 2:

Input:
n=5 
k=3
stalls = [10 1 2 7 5]
Output:
4
Explanation:
The first cow can be placed at stalls[0],
the second cow can be placed at stalls[1] and
the third cow can be placed at stalls[4].
The minimum distance between cows, in this case, is 4,
which also is the largest among all possible ways.
Your Task:
Complete the function int solve(), which takes integer n, k, and a vector stalls with n integers as input and returns the largest possible minimum distance between cows.

Expected Time Complexity: O(n*log(10^9)).
Expected Auxiliary Space: O(1).

Constraints:
2 <= n <= 10^5
2 <= k <= n
0 <= stalls[i] <= 10^9

SOLUTION:-
//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int t;
        t = sc.nextInt();
        while (t-- > 0) {

            int n;
            n = sc.nextInt();

            int k;
            k = sc.nextInt();

            int[] v = new int[n];
            for (int i = 0; i < n; i++) v[i] = sc.nextInt();

            Solution obj = new Solution();
            int res = obj.solve(n, k, v);

            System.out.println(res);
        }
    }
}

// } Driver Code Ends


// User function Template for Java
class Solution {
    public static int solve(int n, int k, int[] stalls) {
       Arrays.sort(stalls);

        int ans=-1;

        int min=Integer.MAX_VALUE,  max=Integer.MIN_VALUE;

        for(int i=0; i<n; i++){

            min=Math.min(min,stalls[i]);

            max=Math.max(max,stalls[i]);

        }

        //SETTING SEARCH SPACE

        int low = 0;

        int high = max-min;

        int mid=0;

        

        while(low<=high){

            mid = low+(high-low)/2;            

            if(isValidDistance(stalls, n, k, mid)){      //if valid, search in right to maximise 

                ans=mid;

                low = mid+1;

            }

            else

                high = mid-1;                        //if not valid, then greater value   

        }

        return ans;

    }

    

    static boolean isValidDistance(int[] stalls, int n, int cow, int mid){

        int cowCount=1, position = stalls[0];

        for(int i=1; i<n; i++){

            if(stalls[i]-position >= mid){

                cowCount++;

                if(cowCount == cow)

                    return true;

                position = stalls[i];      //placement of new cow

            }

        }

        return false;

    } 
    
}
