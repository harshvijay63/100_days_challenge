Articulation Point - I
Given an undirected connected graph with V vertices and adjacency list adj. You are required to find all the vertices removing which (and edges through it) disconnects the graph into 2 or more components.
Note: Indexing is zero-based i.e nodes numbering from (0 to V-1). There might be loops present in the graph.

Example 1:

Input:

Output:{1,4}
Explanation: Removing the vertex 1 will
discconect the graph as-

Removing the vertex 4 will disconnect the
graph as-

 

Your Task:
You don't need to read or print anything. Your task is to complete the function articulationPoints() which takes V and adj as input parameters and returns a list containing all the vertices removing which turn the graph into two or more disconnected components in sorted order. If there are no such vertices then returns a list containing -1.
 

Expected Time Complexity: O(V + E)
Expected Auxiliary Space: O(V)
 

Constraints:
1 ≤ V ≤ 105

SOLUTION:-

//{ Driver Code Starts
// Initial Template for Java
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>>adj = new ArrayList<>();
            for(int i = 0; i < V; i++)
                adj.add(i, new ArrayList<Integer>());
            for(int i = 0; i < E; i++){
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }
            Solution obj = new Solution();
            ArrayList<Integer>ans = obj.articulationPoints(V, adj);
            for (int i =0 ;i < ans.size (); i++) 
                System.out.print (ans.get (i) + " ");
            System.out.println();
        }
    }
}

// } Driver Code Ends


class Solution
{
    int time= 0;
    public ArrayList<Integer> articulationPoints(int V,ArrayList<ArrayList<Integer>> adj)
    {
        boolean[] visited= new boolean[V];
        boolean[] ap= new boolean[V];
        int[] disc= new int[V];
        int[] low= new int[V];
        int[] parent= new int[V];
        Arrays.fill(parent, -1);
        for(int i=0; i<V; i++){
            if(!visited[i]){
                dfs(adj, i, disc, low, parent, ap, visited);
            }
        }
        ArrayList<Integer> al= new ArrayList<>();
        for(int i=0; i<V; i++){
            if(ap[i]){
                al.add(i);
            }
        }
        if(al.size()==0){
            al.add(-1);
        }
        return al;
    }
    
    public void dfs(ArrayList<ArrayList<Integer>> adj, int u, int[] disc, int[] low, int[] parent, boolean[] ap, boolean[] visited){
        visited[u]= true;
        disc[u]= low[u]= ++time;
        int children=0;
        for(int v: adj.get(u)){
            if(!visited[v]){
                children++;
                parent[v]= u;
                dfs(adj, v, disc, low, parent, ap, visited);
                low[u]= Math.min(low[u], low[v]);
                if(parent[u]==-1 && children>1){
                    ap[u]= true;
                }
                if(parent[u]!=-1 && low[v]>= disc[u]){
                    ap[u]= true;
                }
            } else if (v!= parent[u]){
                low[u]= Math.min(low[u], disc[v]);
            }
        }
    }
    
}
