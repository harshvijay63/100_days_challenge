Maximum Number of Toys
You are given N toys in a shop .
The cost of each toy is represented by an array A[]. You are given Q queries, For ith query, You have a C amount of money which you can use to purchase the toys. Also there are K broken toys and you won't purchase them. The task is to calculate the maximum number of toys you can purchase using the C amount of money.

Note: 1 based indexing is used. Each query is treated independently. 
Query definition: The first element represents an integer C where C=Queries[i][0].
The second element represents an integer K, where K = Queries[i][1].
The next K integers represent the indices of broken toys which are Queries[i][j] ,j>1

Example 1:

Input:
N = 5
A[] = {8, 6, 9, 2, 5}
Q = 2
Query[][] = {{12,2,3,4},{30,0}}
Output:
2 5
Explanation:
Query 1: C = 12, K = 2 , 
Indices of Broken toys is {3,4}
Indices of Available toys are {1,2,5}
If we purchase the toys 2 and 5 , 
then cost = A[2]+A[5]= 6+5 = 11,
Therefore,We purchase the 2 toys 
using 11 amount of money.
Query 2: C = 30, K = 0
There is no broken toy. 
We can purchase all toys,
cost = A[1]+A[2]+A[3]+A[4]+A[5]= 30
Therefore,We purchase the 5 toys
using 30 amount of money.
Example 2:

Input:
N = 2
A[] = {3,3}
Q = 1
Query[][] = {{1,0}}
Output:
0
Explanation:
Query 1: C = 1, K = 0 , 
There is no broken toy. 
We have not enough amount to purchase 
any toy.
Your Task: 
You don't need to read input or print anything. Your task is to complete the function maximumToys() which takes the integer N and array A[ ],  integer Q and 2D array Queries[][] as input parameters and returns the array of answers of each query.

Expected Time Complexity: O(NLogMx + Q*K*LogMx + Q*(LogMx)2)
Expected Auxiliary Space: O(Mx)
Where Mx is the maximum element present in the array A[i].

Constraints:
1 ≤ N ≤ 105
1 ≤ A[i] ≤ 106
1 ≤ Q ≤ 104
1 ≤ C ≤ 109
0 ≤ K ≤ 10
1 ≤ Queries[i][j] ≤ N, j>1

SOLUTION:-
//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    static class FastReader{ 
        BufferedReader br; 
        StringTokenizer st; 
  
        public FastReader(){ 
            br = new BufferedReader(new InputStreamReader(System.in)); 
        } 
  
        String next(){ 
            while (st == null || !st.hasMoreElements()){ 
                try{ st = new StringTokenizer(br.readLine()); } catch (IOException  e){ e.printStackTrace(); } 
            } 
            return st.nextToken(); 
        } 
  
        String nextLine(){ 
            String str = ""; 
            try{ str = br.readLine(); } catch (IOException e) { e.printStackTrace(); } 
            return str; 
        } 

        Integer nextInt(){
            return Integer.parseInt(next());
        }

        Long nextLong(){
            return Long.parseLong(next());
        }
    } 

    public static void main(String[] args) throws IOException {
        FastReader sc = new FastReader();        
        PrintWriter out = new PrintWriter(System.out);
        int testcases = sc.nextInt();

        while (testcases-- > 0) {
            int N = sc.nextInt();
            int A[] = new int[N];
            for(int i = 0; i < N; i++) A[i] = sc.nextInt();
            int Q = sc.nextInt();
            ArrayList<Integer> Queries[] = new ArrayList[Q];
            for(int i = 0; i < Q; i++){
                Queries[i] = new ArrayList<>();
                int x = sc.nextInt(), y = sc.nextInt();
                Queries[i].add(x);
                Queries[i].add(y);
                for(int j = 0; j < Queries[i].get(1); j++){
                    x = sc.nextInt();
                    Queries[i].add(x);
                }
            }
            Solution ob = new Solution();
            ArrayList<Integer> ans = ob.maximumToys(N, A, Q, Queries);
            for(int x : ans)
                out.print(x + " ");
            out.print("\n");
        }
        out.flush();
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    class BinaryIndexedTree {
       
        long buf[];
        
        BinaryIndexedTree(int N) {
            buf=new long[N];
        }
        
        void add(int i, int val) {
            while (i<buf.length) {
                buf[i]+=val;
                i+=i&(-i);
            }
        }
        
        long get(int i){
            long sum=0;
            while (i>0) {
                sum+=buf[i];
                i-=i&(-i);
            }  
            return sum;
        }
    }

    ArrayList<Integer> maximumToys(int N, int A[], int Q, ArrayList<Integer> Queries[]){
        int max=Integer.MIN_VALUE;
        for (int i : A) {
            max=Math.max(max, i);
        }
        long[] memo=new long[max+2];
        BinaryIndexedTree t1=new BinaryIndexedTree(max+2);
        BinaryIndexedTree t2=new BinaryIndexedTree(max+2);
        for (int i : A) {
            memo[i]++;
            t1.add(i, i);
            t2.add(i, 1);
        }
        ArrayList<Integer> res=new ArrayList<>();
        for (ArrayList<Integer> q : Queries){
            int c=q.get(0);
            update(t1, t2, A, q, 2, -1);
            int target=search(t1, max, c);
            int count=(int)(t2.get(target-1)+Math.min((c-t1.get(target-1))/target, memo[target]));
            res.add(count);
            update(t1, t2, A, q, 2, 1);
        }
        return res;
    }
    
    void update(BinaryIndexedTree t1, BinaryIndexedTree t2, int[] cost, ArrayList<Integer> query, int start, int act) {
        for (int j=start; j<query.size(); j++) { 
            int p=cost[query.get(j)-1];
            t1.add(p, act*p);
            t2.add(p, act); 
        }
    }
    
    int search(BinaryIndexedTree t, int bound, int c) {
        int lo=0;
        int hi=bound;
        while (lo<=hi) {
            int mid=lo+((hi-lo)>>1);
            if (t.get(mid)<c) {
                lo=mid+1;
            } else {
                hi=mid-1;
            }
        }
        return lo;
    }
}
