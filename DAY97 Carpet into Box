Carpet into Box
There is a carpet of a size a*b [length * breadth]. You are given a box of size c*d. The task is, one has to fit the carpet in the box in a minimum number of moves. 

In one move, you can either decrease the length or the breadth of the carpet by half (floor value of its half).

Note: One can even turn the carpet by 90 degrees any number of times, wont be counted as a move.

 

Example 1:

Input:
A = 8, B = 13
C = 6, D = 10
Output:
Minimum number of moves: 1
Explanation:
Fold the carpet by breadth, 13/2 i.e. 6, 
so now carpet is 6*8 and can fit fine.
 

Example 2:

Input:
A = 4, B = 8
C = 3, D = 10
Output:
Minimum number of moves: 1
Explanation: Fold the carpet by length , 4/2 i.e. 2,
so now carpet is 2*8 and can fit fine.
 

Your Task:
You don't need to read input or print anything. You only need to complete the function carpetBox() that takes an integer A, B, C and D as input and returns an integer denoting the minimum numbers of moves required to fit the carpet into the box.

 

Expected Time Complexity: O( max( log(a), log(b) ) ) .
Expected Auxiliary Space: O(1) .

 

Constrains:
1<= A,B,C,D <= 109

SOLUTION:-

//{ Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class Geeks
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int A =sc.nextInt();
            int B =sc.nextInt();
            int C =sc.nextInt();
            int D =sc.nextInt();
             
           System.out.println(new Solution().carpetBox(A,B,C,D)); 
        }
    }
}

// } Driver Code Ends


//User function Template for Java


class Solution{
    int carpetBox(int a, int b, int c, int d) { 
        //code here
        int count = 0;
        int carpMin = Math.min(a,b);
        int carpMax = Math.max(a,b);
        int boxMin = Math.min(c,d);
        int boxMax = Math.max(c,d);
        if(carpMax < boxMin) return 0;
        while(carpMin > boxMin || carpMax > boxMax){
            if(carpMax > boxMax){
                int temp = (int) Math.floor(carpMax/2);
                if(temp > carpMin){
                    carpMax = temp;
            }
                else{
                    carpMax = carpMin;
                    carpMin = temp;
                }
            }
            else if(carpMin > boxMin){
                int temp = (int) Math.floor(carpMin/2);
                carpMin = temp;
            }
            count++;
        }
        return count;
    }
   
}
