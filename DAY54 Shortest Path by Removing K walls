Shortest Path by Removing K walls
Given a 2-D binary matrix of size n*m, where 0 represents an empty space while 1 represents a wall you cannot walk through. You are also given an integer k.
You can walk up, down, left, or right. Given that you can remove up to k walls, return the minimum number of steps to walk from the top left corner (0, 0) to the bottom right corner (n-1, m-1).
Note: If there is no way to walk from the top left corner to the bottom right corner, return -1.


Example 1:

Input: n = 3, m = 3, k = 1
mat = {{0, 0, 0},
       {0, 0, 1},
       {0, 1, 0}}
Output:
4
Explanation:
We can remove any one of the walls and
reach the bottom in 4 moves.  
Example 2:

Input:
n = 2, m = 2, k = 0
mat[] = {{0, 1},
         {1, 0}}
Output:
-1
Explanation:
There's no way of reaching the bottom
corner without removing any walls.

Your Task:
The task is to complete the function shotestPath() which takes three integers n, m, and k and also a matrix of size n*m as input and returns the minimum number of steps to walk from the top left corner to the bottom right corner.


Constraints:
1 ≤ n,m ≤ 50
0 ≤ k ≤ n*m
Top left and bottom right corners doesn't have 1


Expected Time Complexity: O(n*m*k).
Expected Auxiliary Space: O(n*m*k).

SOLUTION:-


//{ Driver Code Starts
//Initial Template for JAVA

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            
            String St[] = read.readLine().split(" ");
            
            int n = Integer.parseInt(St[0]);
            int m = Integer.parseInt(St[1]);
            int k = Integer.parseInt(St[2]);
            
            int[][] mat = new int[n][m];
            
            for(int i=0; i<n; i++)
            {
                String S[] = read.readLine().split(" ");
                for(int j=0; j<m; j++)
                    mat[i][j] = Integer.parseInt(S[j]);
            }

            Solution ob = new Solution();
            System.out.println(ob.shotestPath(mat,n,m,k));
        }
    }
}
// } Driver Code Ends

//User function Template for Java
class Solution {
    static int shotestPath(int[][] mat, int n, int m, int k) {
        int[][] dirs=new int[][]{{-1,0},{1,0},{0,1},{0,-1}};
        Queue<int[]>qe=new LinkedList<>();
        boolean[][][] visit=new boolean[n][m][k+1];
        int steps=0;
        qe.add(new int[]{0,0,k});
        visit[0][0][k]=true;
        while(!qe.isEmpty())
        {
            int size=qe.size();
            while(size-->0)
            {
                int[] a=qe.poll();
                if(a[0]==n-1 && a[1]==m-1) return steps;
                int obs=a[2];
                for(int[] dir:dirs)
                {
                    int nr=a[0]+dir[0];
                    int nc=a[1]+dir[1];
                    if(nr>=0 && nc>=0 && nr<n && nc<m)
                    {
                        if(mat[nr][nc]==0 && !visit[nr][nc][obs])
                        {
                            qe.add(new int[]{nr,nc,obs});
                            visit[nr][nc][obs]=true;
                    }
                        else if(mat[nr][nc]==1 && obs>0 && !visit[nr][nc][obs-1])
                        {
                            qe.add(new int[]{nr,nc,obs-1});
                            visit[nr][nc][obs-1]=true;
                        }
                    }
                }
            }
            steps++;
        }
        return -1;
    }
};
