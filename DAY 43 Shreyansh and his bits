Shreyansh and his bits
Shreyansh has an integer N. He is really curious about the binary representation of integers. He sees that any given integer has a number of set bits. Now he wants to find out that how many positive integers, strictly less than N, have the same number of set bits as N.
He is a little weak in maths. Help him find the number of integers.
Note : Since N takes large values, brute force won't work.

 

Example 1:

Input:
N = 8
Output: 3
Explanation:
Binary representation of 8 : 1000
So the integers less than 8 with 
same number of set bits are : 4, 2, 1
Hence, the result is 3.  
 

Example 2:

Input:
N = 4
Output: 2
Explanation:
Binary representation of 4 : 100
So the integers less than 4 with 
same number of set bits are : 2, 1
So, The result is 2.

Your Task:  
You don't need to read input or print anything. Your task is to complete the function count() which takes the integer N as input parameters and returns the required answer.

Expected Time Complexity: O(log(n))
Expected Auxiliary Space: O(log(n)*log(n))
 

 

Constraints : 
1 <= N <= 10^12


SOLUTION:-

//{ Driver Code Starts
//Initial Template for Java

//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            String input_line[] = read.readLine().trim().split("\\s+");
            long  N = Long.parseLong(input_line[0]);
            Solution ob = new Solution();
            System.out.println(ob.count(N));
        }
    }
}



// } Driver Code Ends


//User function Template for Java
class Solution{     
    long count(long n)
    {
        // Code Here
        long result = 0;
        int setBits = 0;
        for(int i = 0; i < 64; i++){
            if((n & 1) == 1){
                setBits++;
                long csb_res = csb(i, setBits);
                result = result + csb_res;
            }
            n = n >> 1;
        }
        return result;
    }
    public static long csb(long n, long k){
        if(n == 0 || n < k)
            return 0;
        long result = 1;
        if(k > n-k){
            k = n - k;
        }
        for(int i = 0; i < k; i++){
            result *= (n-i);
            result /= (i + 1);
        }
        return result;
    }
}

