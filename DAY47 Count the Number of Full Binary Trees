Count the Number of Full Binary Trees
Given an array arr[] of n integers, where each integer is greater than 1. The task is to find the number of Full binary tree from the given integers, such that each non-leaf node value is the product of its children value.

Note: Each integer can be used multiple times in a full binary tree. The answer can be large, return  answer modulo 1000000007

Example 1:
Input:
n = 4
arr[] = {2, 3, 4, 6}
Output:
7
Explanation:
There are 7 full binary tree with
the given product property.
Four trees with single nodes
2  3  4  6
Three trees with three nodes
    4   
   / \
  2   2 ,
   6    
  / \
 2   3 ,
   6
  / \
 3   2
 

Example 2:
Input: 
n = 3
arr[] = {2, 4, 5} 
Output: 4
Explanation: There are 4 full binary tree
with the given product property. 
Three trees with single nodes 2 4 5
One tree with three nodes
   4
  / \
 2  2
 

Your Task:  
You don't need to read input or print anything. Your task is to complete the function numoffbt() which takes the array arr[]and its size n as inputs and returns the number of Full binary tree.

Expected Time Complexity: O(n. Log(n))
Expected Auxiliary Space: O(n)

Constraints:
1 ≤ n ≤ 105
2 ≤ arr[i] ≤ 105

SOLUTION:-

//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main(String[] args) throws IOException
	{
	        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t =
            Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while(t-->0)
        {
            int n = Integer.parseInt(br.readLine().trim());
            int a[] = new int[(int)(n)];
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(inputLine[i]);
            }
            
            Solution obj = new Solution();
            System.out.println(obj.numoffbt(a, n));
            
        }
	}
}

// } Driver Code Ends


//User function Template for Java

class Solution {
    
    public static int numoffbt(int arr[], int n)
    {
         // Your code goes here
           int mn = Integer.MAX_VALUE ;
         int mx = Integer.MIN_VALUE ;
         for(int i = 0 ;i<n;i++)
         {
             mx = Math.max(mx,arr[i]) ;
             mn = Math.min(mn,arr[i]);
         }
         int []mrk = new int[mx+1] ;
         int []val = new int[mx+1] ;
         for(int i = 0 ;i<n;i++)
         {
             mrk[arr[i]]=1 ;
             val[arr[i]]=1 ;
         }
         int res =0; int mod = 1000000007  ;
         for(int i = mn ;i<=mx;i++)
         {
             if(mrk[i]!=0)
             {
                 for(int j = i+i ;j<=mx&&j/i<=i ;j=j+i)
                 {
                     if(mrk[j]!=0){
                     if(i == j/i)
                     val[j]=(val[j]+(val[i]*val[j/i] )%mod)%mod;
                     if(i != j/i)
                     val[j]=(val[j]+2*(val[i]*val[j/i])%mod)%mod ;
                 }}
             }

             res=(res+val[i])%mod ;
         }
         return res;
    }
}
