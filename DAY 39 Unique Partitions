Unique Partition 


Given a positive integer n, generate all possible unique ways to represent n as sum of positive integers.

Note: The generated output is printed without partitions. Each partition must be in decreasing order. Printing of all the partitions is done in reverse sorted order. 

Example 1:

Input: n = 3
Output: 3 2 1 1 1 1
Explanation: For n = 3, 
{3}, {2, 1} and {1, 1, 1}.
 

Example 2:

Input: n = 4 
Output: 4 3 1 2 2 2 1 1 1 1 1 1
Explanation: For n = 4, 
{4}, {3, 1}, {2, 2}, {2, 1, 1}, {1, 1, 1, 1}.

Your Task:
You don't need to read or print anything. Your task is to complete the function UniquePartitions() which takes n as input parameter and returns a list of all possible combinations in lexicographically decreasing order. 
 

Expected Time Complexity: O(2^n)
Expected Space Complexity: O(n)

 

Constraints:
1 <= n <= 25





Solution:-

//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            int n = Integer.parseInt(br.readLine().trim());
            Solution ob = new Solution();
            ArrayList<ArrayList<Integer>> ans = ob.UniquePartitions(n);
            for(ArrayList<Integer>i: ans)
                for(int j: i)
                    System.out.print(j + " ");
            System.out.println();
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution
{
    ArrayList<ArrayList<Integer>>ans=new ArrayList<>();
    public ArrayList<ArrayList<Integer>> UniquePartitions(int n)
    {
        path(n,n,new ArrayList<Integer>());
        return ans;
    }
    
    void path(int c,int i,ArrayList<Integer>m)
    {
        if(c<=0)
        {
            ans.add(new ArrayList<>(m));
            
            return;
        }
       
        for(int j=Math.min(i,c);j>=1;j--)
        {
            m.add(j);
           path(c-j,j,m);
          m.remove(m.size()-1);
        }
       
    }
}
