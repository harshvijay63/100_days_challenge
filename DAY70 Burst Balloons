Burst Balloons
You are given N balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array arr. You are asked to brust all the balloons.
If you brust the ith  balloon,, you will get arr[ i - 1 ] * arr[ i ] * arr[ i + 1] coins. If i - 1, or i + 1 goes out of bounds of the array, consider it as if there is a balloon with a 1 painted on it.
Return the maximum coins you can collect by brusting the balloons wisely.

Example 1:

Input:
N = 4
arr[ ] = {3, 1, 5, 8}
Output: 167
Explanation: 
arr[ ] = {3, 1, 5, 8}  - - > {3, 5, 8} - - > {3, 8} - - > { 8} - -> { }
coins = 3 *1 *5,      +      3*5*8     +   1*3*8   +  1*8*1   = 167
 
 

Example 2:

Input:
N = 2
arr[ ] = {1, 10}
Output: 20
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function maxCoins() which takes the array of integers arr and N as parameters and returns the maximum coin you can collect.

Expected Time Complexity: O(N*N*N)
Expected Auxiliary Space: O(N*N)

Constraints:
1 ≤ N ≤ 300
0 ≤ arr [ i ]  ≤ 100

SOLUTION:-
//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.math.*;
import java.io.*;

class GFG {
  public static void main(String[] args) throws IOException {
    Scanner sc = new Scanner(System.in);
    int T = sc.nextInt();
    while (T-- > 0) {
      int n = sc.nextInt();
      int a[] = new int[n];
      for(int i=0;i<n;i++){
        a[i]=sc.nextInt();
      }
      Solution obj = new Solution();
      int ans = obj.maxCoins(n,a);
      System.out.println(ans);
    }
  }
}

// } Driver Code Ends


//User function Template for Java

class Solution {
  public static int maxCoins(int N, int[] nums) {
      //code here
    int l = nums.length;
    int[] arr = new int[l+2];
    arr[0]=arr[l+1]=1;
    for(int i=0; i<nums.length; i++)arr[i+1]=nums[i];
    int [][] dp =new int [l+2][l+2];
    for(int i=l; i>=1; i--){
        for(int j=1; j<=l; j++){
            if(i>j)continue;
            int max=(int)-1e9;
            for(int k=i; k<=j; k++){
                int cost = (arr[i-1]*arr[k]*arr[j+1])+dp[i][k-1]+dp[k+1][j];
                max=Math.max(max,cost);
            }
            dp[i][j]=max;
        }
    }
    return dp [1][l];
  }
}
     
