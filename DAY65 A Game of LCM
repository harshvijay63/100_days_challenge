A Game of LCM
iven an integer N. Find maximum LCM (Least Common Multiple) that can be obtained from four numbers less than or equal to N.
Note: Duplicate numbers can be used.

Example 1:

Input:
N = 4
Output: 12
Explanation:
The four numbers can be [4,4,3,2] or
[4,4,4,3], etc. It can be shown that 12 is
the maximum LCM of four numbers that can
be obtained from numbers less than or equal 
to 4.
Example 2:

Input:
N = 5
Output: 60
Explanation:
The four numbers can be [5,5,4,3] or
[5,4,3,2], etc. 60 is the maximum that can
be obtained.
Your Task:
You don't need to read input or print anything. Your task is to complete the function maxGcd() which takes N as the input parameter and returns the maximum LCM that can be obtained from four numbers less than or equal to N.

Expected Time Complexity: O( Log2(max(N)) )
Expected Auxillary Space: O(1)

Constraints:
2 ≤ N ≤ 104

SOLUTION:-

//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int N = Integer.parseInt(read.readLine());
            Solution ob = new Solution();
            System.out.println(ob.maxGcd(N));
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    long solve(long n) {
        long a1 = n*(n-1);
        int include=0;
        for(long i=n-2;i>=1;i--) {
            long g = gcd(a1,i);
            if(g==1) {
                a1*=i;
                include++;
            }
            if(include==2) return a1;
        }
        return a1;
    }
    
    long maxGcd(int N) {
        // code here
        return Math.max(solve(N),solve(N-1));
    }
    
    long gcd(long a,long b) {
        if(a==0) return b;
        return gcd(b%a,a);
    }
}
